package edu.pitt.cs;

import com.pholser.junit.quickcheck.Property;
import com.pholser.junit.quickcheck.generator.*;
import com.pholser.junit.quickcheck.runner.JUnitQuickcheck;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;
import static org.junit.Assume.assumeThat;
import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

@RunWith(JUnitQuickcheck.class)
public class QuickCheckTest {

	/**
	 * <pre>
	 * Preconditions: x is an int, where x >= -10 and x <= 10.
	 * Execution steps: Call IntegerOps.square(x).
	 * Invariants: [Fill in]
	 * </pre>
	 * 
	 * @param x int generated by QuickCheck
	 */
	
	// TODO: Write @Property testSquare using invariants of your own.
	@Property
	public void testSquare(@InRange(minInt = -10, maxInt = 10) int d) {
		int ret = IntegerOps.square(d);
		// TODO: Fill in
		assertTrue("is positive or zero", ret >=0);
		assertTrue("greater than or equal to", ret >= d);
	}
	
	/**
	 * <pre>
	 * Preconditions: x is an int, where x >= -10, x <= 10, y >= -10, and y <= 10.
	 * Execution steps: Call IntegerOps.add(x, y).
	 * Invariants: [Fill in]
	 * </pre>
	 * 
	 * @param x int generated by QuickCheck
	 * @param y int generated by QuickCheck
	 */
	
	// TODO: Write @Property testAddInRange using invariants of your own.
	@Property
	public void testAddInRange(@InRange(minInt = -10, maxInt = 10) int x, @InRange(minInt = -10, maxInt = 10) int y) {
		double ret = IntegerOps.add(x, y);
		// TODO: Fill in
		if(x > 0 && y > 0){
			assertTrue("is positive", ret > 0);
		}
		if(x < 0 && y < 0){
			assertTrue("is negative", ret < 0);
		}
		assertTrue("in range", ret >= -20 && ret <= 20);
	}

	/**
	 * <pre>
	 * Preconditions: x is an int, where x >= -10, x <= 10, y >= -10, y <= 10, AND x > -y.
	 * Execution steps: Call IntegerOps.add(x, y).
	 * Invariants: [Fill in]
	 * </pre>
	 * 
	 * @param x int generated by QuickCheck
	 * @param y int generated by QuickCheck
	 */
	
	// TODO: Write @Property testAddGreaterThan and see if you can find additional invariants with the addition x > -y precondition.
	// Use the assumeThat API to enforce the x > -y precondition.
	@Property
	public void testAddGreaterThan(@InRange(minInt = -10, maxInt = 10) int x, @InRange(minInt = -10, maxInt = 10) int y) {
		assumeThat("Precondition x > -y is not met", x, greaterThan(-y));
		int ret = IntegerOps.add(x, y);
		// TODO: Fill in
		assertTrue("is positive", ret > 0);
		assertTrue("in range", ret >= -20 && ret <= 20);
	}
}